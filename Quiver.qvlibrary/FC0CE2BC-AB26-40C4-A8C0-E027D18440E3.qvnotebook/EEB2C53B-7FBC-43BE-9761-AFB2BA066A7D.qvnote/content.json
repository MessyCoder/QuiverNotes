{
  "title": "第五章 Session持久化",
  "cells": [
    {
      "type": "text",
      "data": "<div>相关链接：<a href=\"http://trasis.jp/blog/lab/2008/08/apache-tomcat%E3%81%A7%E8%B2%A0%E8%8D%B7%E5%88%86%E6%95%A3.html\" style=\"line-height: 1.4;\">http://trasis.jp/blog/lab/2008/08/apache-tomcat%E3%81%A7%E8%B2%A0%E8%8D%B7%E5%88%86%E6%95%A3.html</a></div><div><br></div>至于Tomcat等一些服务器为什么使用Session就暂且不记了，这属于Session的发展历史。<div><br></div><div>Java Servlet API中代表Session的是<code>javax.servlet.http.HttpSession</code>类。每一个Servlet容器都需要给出相应的实现。</div><div>在Tomcat 7中这个实现类是：<code>org.apache.catalina.session.StandardSessionFacade</code><span style=\"color: rgb(0, 0, 0); font-family: -webkit-standard; font-size: medium;\">。</span></div><div><br></div><div>Session对象中包含一个唯一的ID信息，称作Session ID。这个ID用来标识某个用户的Session信息，它必须出现在每一个Http请求的Cookie里或者请求参数里。</div><div>默认情况下，Servlet容器使用Cookie跟踪Session，Cookie的名默认是JSESSIONID，不过可以在web.xml中更改。</div><div><br></div><div><font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">如果浏览器禁用了Cookie，SessionID就必须以请求参数或者表单项的形式发送给服务器</font>。</div><div><br></div><div>下面是HttpSession的源代码：（摘自apache-tomcat-7.0.68）</div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "package javax.servlet.http;\n\nimport java.util.Enumeration;\n\nimport javax.servlet.ServletContext;\n\npublic interface HttpSession {\n\n    /**\n     * Returns the time when this session was created, measured in milliseconds\n     * since midnight January 1, 1970 GMT.\n     *\n     * @return a <code>long</code> specifying when this session was created,\n     *         expressed in milliseconds since 1/1/1970 GMT\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     */\n    public long getCreationTime();\n\n    /**\n     * 返回该用户的Session ID\n     * \n     * 不能再一个调用过invalidate方法的Session上调用此方法\n     * 否则会抛出IllegalStateException\n     *\n     */\n    public String getId();\n\n    /**\n     * Returns the last time the client sent a request associated with this\n     * session, as the number of milliseconds since midnight January 1, 1970\n     * GMT, and marked by the time the container received the request.\n     * <p>\n     * Actions that your application takes, such as getting or setting a value\n     * associated with the session, do not affect the access time.\n     *\n     * @return a <code>long</code> representing the last time the client sent a\n     *         request associated with this session, expressed in milliseconds\n     *         since 1/1/1970 GMT\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     */\n    public long getLastAccessedTime();\n\n    /**\n     * Returns the ServletContext to which this session belongs.\n     *\n     * @return The ServletContext object for the web application\n     * @since 2.3\n     */\n    public ServletContext getServletContext();\n\n    /**\n     * Specifies the time, in seconds, between client requests before the\n     * servlet container will invalidate this session. A zero or negative time\n     * indicates that the session should never timeout.\n     *\n     * @param interval\n     *            An integer specifying the number of seconds\n     */\n    public void setMaxInactiveInterval(int interval);\n\n    /**\n     * Returns the maximum time interval, in seconds, that the servlet container\n     * will keep this session open between client accesses. After this interval,\n     * the servlet container will invalidate the session. The maximum time\n     * interval can be set with the <code>setMaxInactiveInterval</code> method.\n     * A zero or negative time indicates that the session should never timeout.\n     *\n     * @return an integer specifying the number of seconds this session remains\n     *         open between client requests\n     * @see #setMaxInactiveInterval\n     */\n    public int getMaxInactiveInterval();\n\n    /**\n     * @deprecated As of Version 2.1, this method is deprecated and has no\n     *             replacement. It will be removed in a future version of the\n     *             Java Servlet API.\n     */\n    @SuppressWarnings(\"dep-ann\")\n    // Spec API does not use @Deprecated\n    public HttpSessionContext getSessionContext();\n\n    /**\n     * 返回与该Session绑定的与name对应的对象，如果不存在就返回null。\n     * \n     * 不能再一个调用过invalidate方法的Session上调用此方法\n     * 否则会抛出IllegalStateException\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * @param name\n     *            a string specifying the name of the object\n     * @return the object with the specified name\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     * @deprecated As of Version 2.2, this method is replaced by\n     *             {@link #getAttribute}.\n     */\n    @SuppressWarnings(\"dep-ann\")\n    // Spec API does not use @Deprecated\n    public Object getValue(String name);\n\n    /**\n     * 返回一个包含所有绑定对象名的Enumeration对象。\n     * \n     * 不能在一个调用过invalidate方法的Session上调用此方法\n     * 否则会抛出IllegalStateException\n     */\n    public Enumeration<String> getAttributeNames();\n\n    /**\n     * @return an array of <code>String</code> objects specifying the names of\n     *         all the objects bound to this session\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     * @deprecated As of Version 2.2, this method is replaced by\n     *             {@link #getAttributeNames}\n     */\n    @SuppressWarnings(\"dep-ann\")\n    // Spec API does not use @Deprecated\n    public String[] getValueNames();\n\n    /**\n     * 将一个对象绑定到Session。如果name已经存在，则已绑定的对象会被替换掉。\n     * 如果该对象是Null，则相当于调用removeAttribute()方法。\n     * \n     * 如果被绑定的对象实现了javax.servlet.http.HttpSessionBindingListener接口，\n     * 在此方法结束时，如果该对象替换了已经存在的对象，则该对象的valueBound()就会被回调，\n     * 被替换的对象的valueUnbound()就会被回调；\n     * 如果被绑定的对象替换了自身，则该对象的回调函数不会被触发。\n     * \n     * After this method executes, and if the new object implements\n     * <code>HttpSessionBindingListener</code>, the container calls\n     * <code>HttpSessionBindingListener.valueBound</code>. The container then\n     * notifies any <code>HttpSessionAttributeListener</code>s in the web\n     * application.\n     * \n     * 不能在一个调用过invalidate方法的Session上调用此方法\n     * 否则会抛出IllegalStateException\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * @param name\n     *            the name to which the object is bound; cannot be null\n     * @param value\n     *            the object to be bound; cannot be null\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     * @deprecated As of Version 2.2, this method is replaced by\n     *             {@link #setAttribute}\n     */\n    @SuppressWarnings(\"dep-ann\")\n    // Spec API does not use @Deprecated\n    public void putValue(String name, Object value);\n\n    /**\n     * Removes the object bound with the specified name from this session. If\n     * the session does not have an object bound with the specified name, this\n     * method does nothing.\n     * <p>\n     * After this method executes, and if the object implements\n     * <code>HttpSessionBindingListener</code>, the container calls\n     * <code>HttpSessionBindingListener.valueUnbound</code>. The container then\n     * notifies any <code>HttpSessionAttributeListener</code>s in the web\n     * application.\n     *\n     * @param name\n     *            the name of the object to remove from this session\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     */\n    public void removeAttribute(String name);\n\n    /**\n     * @param name\n     *            the name of the object to remove from this session\n     * @exception IllegalStateException\n     *                if this method is called on an invalidated session\n     * @deprecated As of Version 2.2, this method is replaced by\n     *             {@link #removeAttribute}\n     */\n    @SuppressWarnings(\"dep-ann\")\n    // Spec API does not use @Deprecated\n    public void removeValue(String name);\n\n    /**\n     * 使该Session对象失效，并将所有绑定的对象移除。\n     * \n     * 不能在一个调用过invalidate方法的Session上调用此方法\n     * 否则会抛出IllegalStateException\n     */\n    public void invalidate();\n\n    /**\n     * Returns <code>true</code> if the client does not yet know about the\n     * session or if the client chooses not to join the session. For example, if\n     * the server used only cookie-based sessions, and the client had disabled\n     * the use of cookies, then a session would be new on each request.\n     *\n     * @return <code>true</code> if the server has created a session, but the\n     *         client has not yet joined\n     * @exception IllegalStateException\n     *                if this method is called on an already invalidated session\n     */\n    public boolean isNew();\n}"
    },
    {
      "type": "text",
      "data": "<code>HttpSession</code>对象要通过<code>HttpServletRequest</code>的<code>getSession(boolean createNew)</code>方法获取。当布尔参数为true时，表示如果用户还没有创建HttpSession对象，则立刻创建一个并返回；如果布尔参数为false，则用户在尚未建立HttpSession时，getSession返回null。<div><br></div><h1>Session的失效</h1><div>在Tomcat中，Session的有效时间默认是30分钟，如果用户在30分钟之内没有与服务器互动，对应的Session就会失效。不过，在web.xml文件中，Session的失效时间是可以更改的，比如改为60分钟：</div>"
    },
    {
      "type": "code",
      "language": "xml",
      "data": "<session-config>\n    <session-timeout>60</session-timeout>\n</session-config>"
    },
    {
      "type": "text",
      "data": "session-timeout的单位是分钟，但是如果设置为-1的话，Session就永不失效。另外，通过调用Session对象的invalidate方法也可以使一个Session失效。<div><br></div><div><br></div>"
    },
    {
      "type": "text",
      "data": "<h1>Tomcat中的Session管理器</h1><div>Session管理器的接口类是org.apache.catalina.Manager。管理器负责生成并管理的Session的ID，以及后续的生命周期实现（创建，空置，失效）。除了基本的功能外，各个管理器的实现还会附带一些特定的功能。</div><div><br></div><div><i>源代码的注释中写道：管理器用来管理与特定容器相关联的Session池，不同的管理器实现可能会支持更有价值的特性，比如Session数据的持久化，或者为可分布式Web应用进行Session迁移等</i>。</div><div><br></div><div>在没有任何设置的情况下，Tomcat使用的是<code>org.apache.catalina.session.StandardManager</code>实现类。<code>StandardManager</code>在Tomcat服务器正常关闭的时候将Session信息输出到硬盘上。服务器再次启动时这些回话数据会被重新加载并从硬盘上抹除。</div><div><ul><li>StandardManager会在服务器关闭时，持久化没有失效的Session信息。<br></li><li>Session信息保存在<code><font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">CATALINA_HOME</font>/work/Catalina/localhost/<font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">CONTEXT</font>/SESSIONS.ser</code>文件中。</li></ul><div><br></div><h2>StandardManager</h2><div>Tomcat中使用的Session管理器配置在<code style=\"font-size: 11px;\"><span style=\"color: rgb(50, 50, 50); background-color: rgb(254, 250, 0);\">CATALINA_HOME</span>/conf/context.xml</code>文件中。默认情况下，Session管理器的设置是空白的，Tomcat自动使用<span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 11px; background-color: rgba(0, 0, 0, 0.0392157);\">StandardManager</span>类作为Session管理器：</div></div>"
    },
    {
      "type": "code",
      "language": "xml",
      "data": "<?xml version='1.0' encoding='utf-8'?>\n\n<Context>\n\n    <!-- Default set of monitored resources -->\n    <WatchedResource>WEB-INF/web.xml</WatchedResource>\n\n    <!-- 默认情况下Session管理器的设置是被注释掉的 -->\n    <!--\n    <Manager pathname=\"\" />\n    -->\n\n</Context>"
    },
    {
      "type": "text",
      "data": "如果要改变<span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 11px; background-color: rgba(0, 0, 0, 0.0392157);\">StandardManager</span>类的默认行为，就需要将其明确配置出来。"
    },
    {
      "type": "code",
      "language": "xml",
      "data": "<Manager\n    className=\"org.apache.catalina.session.StandardManager\"\n    maxActiveSessions=\"-1\"\n    pathname=\"/var/sessiondata/mysessions.ser\"\n    sessionIdLength=\"32\">\n</Manager>"
    },
    {
      "type": "text",
      "data": "<div><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 11px; line-height: 15px; background-color: rgba(0, 0, 0, 0.0392157);\">StandardManager</span><span style=\"line-height: 1.4;\">可以使用下列特定的属性：</span><br></div><ul><li><code>maxActiveSessions</code>&nbsp;:&nbsp;指定处 : 于活动状态的Session数量，指定负数表示没有限制。</li><ul><li><font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">达到上限时，调用request.getSession()会抛出一个IllegalStateException异常</font>。</li></ul><li><code>sessionIdLength</code><span style=\"line-height: 1.4;\">&nbsp;</span><span style=\"line-height: 1.4;\">:&nbsp;指定Session ID的字节长度。</span></li><li><code style=\"font-size: 11px;\">pathname</code><span style=\"line-height: 1.4;\">&nbsp;:&nbsp;指定输出Session数据的文件路径，该路径可以是绝对的，也可是相对的。相对路径参照的是app所对应的work目录。默认值是“SESSION.ser”</span></li><ul><li><font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">设置为空字符串可以禁用掉持久化功能</font>。</li></ul><li><code>processExpiresFrequency</code><span style=\"line-height: 1.4;\">&nbsp;: 指定检查失效Session的频率。默认是6。最小值是1。</span></li><li><code>secureRandomClass</code><span style=\"line-height: 1.4;\">&nbsp;: 设置用于生成Session ID的类，该类必须继承自</span><code>java.security.SecureRandom</code><span style=\"line-height: 1.4;\">（同时也是默认值）。</span></li><li><code>secureRandomAlgorithm</code><span style=\"line-height: 1.4;\">&nbsp;: 设定随机算法， 默认是</span><code>SHA1PRNG</code><span style=\"line-height: 1.4;\">。</span></li><li><code>secureRandomProvider</code><span style=\"line-height: 1.4;\">&nbsp;: 设定随机数生成器的Provider，默认情况下使用平台上的默认Provider。</span></li></ul><div><ul><li><span style=\"line-height: 1.4;\">【已过时】</span><code style=\"font-size: 11px;\">maxInactiveInterval</code><span style=\"line-height: 1.4;\">&nbsp;</span><span style=\"line-height: 1.4;\">:&nbsp;设置Session的过期时间，默认是1800秒，会被web.xml的设置覆盖掉。</span></li><li><span style=\"line-height: 1.4;\"><span style=\"line-height: 1.4;\">【已过时】</span><code style=\"font-size: 11px;\">distributable</code><span style=\"line-height: 1.4;\">&nbsp;</span><span style=\"line-height: 1.4;\">: &nbsp;设置为true之后，所有添加到Session中的属性都要实现java.io.Serializable接口。否则抛出异常。</span><br></span></li><ul><li><span style=\"line-height: 1.4;\"><span style=\"line-height: 1.4;\">在web.xml可以通过添加<span style=\"font-family: Monaco; font-size: 11px; line-height: normal; color: rgb(0, 145, 147);\">&lt;</span><span style=\"color: rgb(78, 145, 146); font-family: Monaco; font-size: 11px; line-height: normal;\">distributable</span><span style=\"font-family: Monaco; font-size: 11px; line-height: normal; color: rgb(0, 0, 0);\">&nbsp;</span><span style=\"font-family: Monaco; font-size: 11px; line-height: normal; color: rgb(0, 145, 147);\">/&gt;</span><span style=\"line-height: 1.4;\">将其直接设置为true。</span></span></span></li></ul></ul><h2>PersistentManager</h2><div>PersistentManager除了对Session的标准操作，比如创建，访问，和维护之外，还拥有将空闲Session交换到外部存储器的功能。所谓的空闲Session是那些尚未失效，但是在一个指定的时间内没有被使用过的Session对象，它们可以被临时地存储到外面以节省内存的使用。</div></div><div><br></div><div>PersistentManager通过org.apache.catalina.Store接口将Session数据持久化到外部。Tomcat自带两个Store的实现：<br></div><div><ul><li><code>org.apache.catalina.session.FileStore</code> ： 输出到磁盘上的文件。<br></li><li><code>org.apache.catalina.session.JDBCStore</code> ： 输出到关系型数据库。</li></ul></div><div>PersistentManager具体是指org.apache.catalina.session.<span style=\"line-height: 1.4;\">PersistentManager。使用它需要显式将其部署在</span><code style=\"font-size: 11px;\"><span style=\"color: rgb(50, 50, 50); background-color: rgb(254, 250, 0);\">CATALINA_HOME</span>/conf/context.xml</code><span style=\"line-height: 1.4;\">文件中。它可以使用下面这些属性：</span></div><div><ul><li>saveOnRestart : 为true时表示服务器在关闭时要保存活动的Session，并在启动时加载。<br></li><li>minIdleSwap&nbsp;: 用于当Session的数量超过<span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 11px; line-height: 15px; background-color: rgba(0, 0, 0, 0.0392157);\">maxActiveSessions</span>时，仅仅将超过该值的Session交换出去。</li><li>maxIdleSwap&nbsp;: 空闲时间超过该值的Session会在下一轮检测时被交换出去。（Session从内存中移除）</li><li>maxIdleBackup&nbsp;:&nbsp;空闲时间超过该值的Session会在下一轮检测时被备份。该值应当小于等于maxIdleSwap。（备份不会从内存中移除Session）</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li>&nbsp;:&nbsp;</li><li><br></li></ul></div><div><span style=\"line-height: 1.4;\"><br></span></div><div><br></div>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}